// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["views"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    MODERATOR
    ADMIN
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum Status {
    PLANNED
    OPEN
    INPROGRESS
    COMPLETED
    BLOCKED
    BACKLOG
    CANCELLED
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    referralToken String    @unique @default(uuid())
    image         String
    accounts      Account[]
    sessions      Session[]

    Members       Member[]
    Organisations Organisation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organisation {
    id        String    @id @default(cuid())
    name      String
    slug      String    @unique
    owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    members   Member[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Project   Project[]

    @@index([ownerId], name: "ownerId")
    @@index([name], name: "name")
    @@index([slug], name: "slug")
}

model Project {
    id             String       @id @default(cuid())
    name           String
    description    String
    resources      Resource[]
    teamMembers    Member[]
    organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    issues         Issue[]
}

model Resource {
    id          String   @id @default(cuid())
    title       String
    link        String
    description String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([projectId], name: "projectId")
}

model Issue {
    id           String    @id @default(cuid())
    title        String
    description  String
    comments     Comment[]
    assignedTo   Member?   @relation(fields: [assignedToId], references: [id])
    assignedToId String?
    priority     Priority
    status       Status
    project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId    String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    @@index([assignedToId, projectId])
}

model Comment {
    id        String   @id @default(cuid())
    comment   String
    member    Member   @relation(fields: [memberId], references: [id])
    memberId  String
    issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
    issueId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([memberId], name: "memberId")
    @@index([issueId], name: "issueId")
}

model Member {
    id             String       @id @default(cuid())
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
    organisationId String
    role           Role
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Issues         Issue[]
    Project        Project?     @relation(fields: [projectId], references: [id])
    projectId      String?
    Comment        Comment[]

    @@index([userId, organisationId], name: "user_org")
}
